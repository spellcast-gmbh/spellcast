{
  "openapi": "3.1.0",
  "info": {
    "title": "Spellcast AgenticTrace API",
    "description": "API for managing AgenticTraces - comprehensive tracking of multi-agent workflows with events, handovers, and tracing capabilities. All endpoints require authentication using a Bearer token in the Authorization header.",
    "version": "2.0.0",
    "contact": {
      "name": "Spellcast API Support"
    }
  },
  "servers": [
    {
      "url": "https://spellcast-ten.vercel.app/api",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    }
  ],
  "paths": {
    "/traces": {
      "post": {
        "x-openai-isConsequential": false,
        "operationId": "submitPrompt",
        "summary": "Submit a prompt for processing",
        "description": "Submit a prompt with a name to create a new trace. Returns immediately with trace ID while processing happens asynchronously.",
        "tags": ["AgenticTrace"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPromptRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully submitted prompt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmitPromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "x-openai-isConsequential": false,
        "operationId": "listTraces",
        "summary": "List agentic traces",
        "description": "Retrieve a paginated list of agentic traces with cursor-based pagination and field selection.",
        "tags": ["AgenticTrace"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination (trace ID)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of traces to return (1-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order results by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["createdAt", "updatedAt", "name"],
              "default": "createdAt"
            }
          },
          {
            "name": "orderDirection",
            "in": "query",
            "description": "Order direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include in response",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,status,createdAt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved traces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TracesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/traces/{id}": {
      "get": {
        "x-openai-isConsequential": false,
        "operationId": "getTrace",
        "summary": "Get a specific agentic trace",
        "description": "Retrieve a specific agentic trace by its ID with optional field selection.",
        "tags": ["AgenticTrace"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the trace to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to include in response",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,status,events,createdAt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved trace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Trace not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "API key authentication using Bearer token in Authorization header"
      }
    },
    "schemas": {
      "AgentType": {
        "type": "string",
        "enum": ["planner", "executor", "reviewer", "researcher", "writer", "analyst", "coordinator"],
        "description": "The type of agent performing the operation"
      },
      "TraceStatus": {
        "type": "string",
        "enum": ["pending", "running", "completed", "failed"],
        "description": "The current status of the trace"
      },
      "Handover": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the handover"
          },
          "input": {
            "type": "string",
            "description": "Input data for the target agent"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the handover occurred"
          },
          "targetAgent": {
            "$ref": "#/components/schemas/AgentType"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional handover metadata"
          }
        },
        "required": ["id", "input", "timestamp", "targetAgent"]
      },
      "AgentEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the event"
          },
          "input": {
            "type": "string",
            "description": "Input data for the agent"
          },
          "agentType": {
            "$ref": "#/components/schemas/AgentType"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the event occurred"
          },
          "duration": {
            "type": "number",
            "minimum": 0,
            "description": "Duration in milliseconds"
          },
          "outcome": {
            "type": "object",
            "additionalProperties": true,
            "description": "Event outcome data"
          },
          "markdown": {
            "type": "string",
            "description": "Markdown description of the event"
          },
          "handovers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Handover"
            },
            "description": "Handovers to other agents"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional event metadata"
          }
        },
        "required": ["id", "input", "agentType", "timestamp", "outcome"]
      },
      "AgenticTrace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the trace"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Human-readable name for the trace"
          },
          "initialInput": {
            "type": "string",
            "description": "The initial input that started the trace"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the trace was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the trace was last updated"
          },
          "duration": {
            "type": "number",
            "minimum": 0,
            "description": "Total duration in milliseconds"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentEvent"
            },
            "description": "Ordered list of agent events"
          },
          "status": {
            "$ref": "#/components/schemas/TraceStatus"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional trace metadata"
          }
        },
        "required": ["id", "name", "initialInput", "createdAt", "updatedAt", "events", "status"]
      },
      "SubmitPromptRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Human-readable name for the trace"
          },
          "prompt": {
            "type": "string",
            "minLength": 1,
            "description": "The prompt to process"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional trace metadata"
          }
        },
        "required": ["name", "prompt"]
      },
      "SubmitPromptResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier for the created trace"
              },
              "name": {
                "type": "string",
                "description": "The name of the trace"
              },
              "status": {
                "$ref": "#/components/schemas/TraceStatus"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "When the trace was created"
              }
            },
            "required": ["id", "name", "status", "createdAt"]
          }
        },
        "required": ["success", "data"]
      },
      "TraceResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/AgenticTrace"
          }
        },
        "required": ["success", "data"]
      },
      "TracesListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "traces": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgenticTrace"
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string",
                    "nullable": true,
                    "description": "Current cursor position"
                  },
                  "nextCursor": {
                    "type": "string",
                    "nullable": true,
                    "description": "Cursor for next page"
                  },
                  "hasMore": {
                    "type": "boolean",
                    "description": "Whether there are more results"
                  },
                  "orderBy": {
                    "type": "string",
                    "description": "Field used for ordering"
                  },
                  "orderDirection": {
                    "type": "string",
                    "description": "Order direction"
                  }
                },
                "required": ["cursor", "nextCursor", "hasMore", "orderBy", "orderDirection"]
              }
            },
            "required": ["traces", "pagination"]
          }
        },
        "required": ["success", "data"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong"
          },
          "details": {
            "type": "string",
            "description": "Additional error details"
          }
        },
        "required": ["success", "error"]
      }
    }
  },
  "tags": [
    {
      "name": "AgenticTrace",
      "description": "Operations for managing agentic traces and multi-agent workflows"
    }
  ]
}